---
import UIString from './UIString.wromo';
import Badge from './Badge.wromo';

export interface Props {
  v: string;
}

const { v } = Wromo.props as Props;

/**
 * Split a semantic version string like `0.23.3` into a tuple of `[major, minor, patch]`.
 */
const parseSemVer = (semver: string) => semver
  .split('.')
  .map(part => parseInt(part.replace(/[^0-9]/g, ''), 10));

/**
 * Decide a feature is “new” if it was added in the latest minor version.
 * For example, `@version 0.24.0` will be new as long as `wromo@latest` is 0.24.x
 */
const isFeatureNew = async (sinceVersion: string) => {
  const wromoInfo =
    await fetch('https://registry.npmjs.org/wromo/latest').then(res => res.json());
  const latestWromoVersion = wromoInfo.version;
  const [sinceMajor, sinceMinor] = parseSemVer(sinceVersion);
  const [latestMajor, latestMinor] = parseSemVer(latestWromoVersion);
  return sinceMajor >= latestMajor && sinceMinor >= latestMinor;
};

const isNew = await isFeatureNew(v);
---
<span>
  <strong><UIString key="since.addedIn" /></strong> v{v}
  {isNew && <Badge variant="accent"><UIString key="since.new" /></Badge>}
</span>
